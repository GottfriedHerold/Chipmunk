

# This file was *autogenerated* from the file build_latex_table.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_112 = Integer(112); _sage_const_128 = Integer(128); _sage_const_512 = Integer(512); _sage_const_1024 = Integer(1024); _sage_const_8192 = Integer(8192); _sage_const_131072 = Integer(131072); _sage_const_21 = Integer(21); _sage_const_24 = Integer(24); _sage_const_26 = Integer(26); _sage_const_15 = Integer(15)
from tabulate import tabulate, TableFormat, Line, _latex_line_begin_tabular, _latex_row
from functools import partial
load("params_mcdiarmid.sage")

properfmt = TableFormat(
  lineabove=partial(_latex_line_begin_tabular, booktabs=True),
  linebelowheader=Line("\\midrule", "", "", ""),
  linebetweenrows=None,
  linebelow=Line("\\bottomrule\n\\end{tabular}", "", "", ""),
  headerrow=partial(_latex_row, escrules={}),
  datarow=partial(_latex_row, escrules={}),
  padding=_sage_const_1 ,
  with_header_hide=None,
)

def build_latex_table(params):
  to_tabulate = []
  for secpar, sparams in params.items():
    srows = sum([sum([len(pp) for pp in p.values()]) for p in sparams.values()])
    sfirst = True
    for tau, tparams in sparams.items():
      trows = sum([len(p) for p in tparams.values()])
      tfirst = True
      for rho, rparams in tparams.items():
        rrows = len(rparams)
        rfirst = True
        for epsilon, eparams in rparams.items():
          if sfirst:
            secparcolumn = "\\multirow{" + str(srows) + "}{*}{$" + str(secpar) + "$}"
            sfirst = False
          else:
            secparcolumn = ""
          if tfirst:
            taucolumn = "\\multirow{" + str(trows) + "}{*}{$" + str(tau) + "$}"
            tfirst = False
          else:
            taucolumn = ""
          if rfirst:
            rhocolumn = "\\multirow{" + str(rrows) + "}{*}{$" + str(rho) + "$}"
            rfirst = False
          else:
            rhocolumn = ""
          to_tabulate.append(
            [secparcolumn,
            taucolumn,
            rhocolumn,
            "$2^{-" + str(epsilon) + "}$",
            "$"+str(eparams[_sage_const_0 ])+"$",
            "$"+str(eparams[_sage_const_1 ]["alpha_H"])+"$",
            "$"+str(eparams[_sage_const_1 ]["delta"])+"$",
            "$"+str(eparams[_sage_const_1 ]["phi"])+"$",
            "$"+str(eparams[_sage_const_1 ]["gamma"])+"$",
            "$"+str(eparams[_sage_const_1 ]["beta_sigma"])+"$",
            "$"+str(eparams[_sage_const_1 ]["q"])+"$",
            "$"+str(eparams[_sage_const_2 ]["arity"])+"$",
            "$"+str(eparams[_sage_const_2 ]["beta"])+"$",
            "$"+str(eparams[_sage_const_2 ]["q"])+"$",
            "$"+("%.4f" % (eparams[_sage_const_1 ]["size"]+eparams[_sage_const_2 ]["path size"]+eparams[_sage_const_2 ]["payload size"]))+"$ KB"])
  
  return tabulate(to_tabulate,headers=["$\\secpar$","$\\tau$","$\\rho$","$\\epsilon$","$\\alpha_w$","$\\alpha_H$","$\\delta$","$\\varphi$","$\\gamma$","$\\beta_\\sigma$","$\\qkots$","$\\eta$","$\\betaopen$","$\\qhvc$","Size"],tablefmt=properfmt)
  
# security parameter
secpars = [_sage_const_112 ,_sage_const_128 ]
# polynomial degree
n = _sage_const_512 
# number of users
rhos = [_sage_const_1024 , _sage_const_8192 , _sage_const_131072 ]
# height of the tree
taus = [_sage_const_21 ,_sage_const_24 ,_sage_const_26 ]
# targeted failure probability
fail_prob_targets = [_sage_const_15 ]

verbosity = _sage_const_1 

params = find_params(n,secpars,taus,rhos,fail_prob_targets,verbosity)
build_latex_table(params)

