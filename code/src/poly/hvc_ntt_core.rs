use crate::{HVC_MODULUS, N};

/// NTT forward table where the i-th element is g^rev(i) where
/// - g = 202470 is a primitive root
/// - rev(i) is the reverse bit decomposition of i, i.e.,
///   0   ->  0
///   1   ->  100 0000
///   2   ->  010 0000
///   3   ->  110 0000   ...
const NTT_TABLE: [i32; 1024] = [
    1, 7979, 35197, 23958, 18435, 96940, 47095, 69696, -45282, 768, 50779, 65147, -39569, -34630,
    264, 78926, -47249, -81944, -42947, -21543, -8427, 74963, 22520, 47922, 79562, 5555, -80722,
    65443, 10268, 16160, 96950, 61355, 53530, -84701, -88219, 59015, 26699, -62082, -35452, -31073,
    -33345, -47819, 93152, -32690, 32021, 26779, -60790, -58234, -98048, 98835, 63357, 62274,
    28115, 84767, -73738, 33704, -75658, -79501, 23276, -2544, -17343, 100502, 67712, -62697,
    90379, -58380, 77846, 100795, -87289, -22376, 5276, -75420, 27427, 69546, 41086, -26407,
    -49237, 73291, -64798, -3092, 66315, -57945, -3481, 2262, -83565, 89482, 100466, -67148, 98853,
    38917, 87561, -37619, 11091, 94781, 70402, -91005, 98537, -49411, -86029, 96267, 65468, 77444,
    -10649, -14864, 32837, 49547, 71789, 27206, -70363, -3320, 61384, -68312, 42426, -80456, -7923,
    41319, -97764, -68165, -78345, -27256, -49457, -60065, 99229, -2274, 40446, -64142, 49049,
    48681, -45987, 52657, -27240, 3256, -60052, -49569, 49781, 9472, -92729, -38994, -67572,
    -36761, -48572, -95005, 24612, -88509, -64138, -8530, -13284, 46783, 71466, 85778, 35084,
    -66657, 62944, 10995, -42063, -64462, 17221, -60175, 98820, -21637, -59937, 57004, 42376,
    -73900, 65255, -59, -5749, -49093, 15576, -6685, -15640, -98465, 45312, 35849, -8634, 45334,
    -90591, -11144, -37749, 91687, 31376, -50851, -54519, 100837, 42966, -29609, -60325, 2447,
    -77761, -30839, 8830, 99279, -25326, 68587, -97034, 79421, 55349, 33637, 67929, 46722, 40964,
    13920, 33325, 90992, -83585, -70098, 4785, 61951, -20032, -65964, -94123, -10305, -76707,
    66154, 2669, 6886, -27898, 24652, 6873, 96357, 84731, 90147, -16870, 22262, -94222, 10786,
    99087, 81226, 2381, -60783, 67068, 70405, 29225, 20325, 66356, 66441, 48154, 3831, 64011, 8962,
    47657, 93328, 7860, 64263, 28046, -60278, -69295, 2626, 98658, -97717, -85005, -46110, 65820,
    47510, 10762, -97274, 80089, -47325, 17574, -82130, -6631, 9784, -22604, 92854, 52813, 74193,
    19657, -87619, -12251, -23783, 57184, 76886, 56831, 98841, -80391, 70703, 54734, -7376, -86408,
    -89232, -80266, 54313, 37900, 99377, -12316, 65841, -338, -61113, -48015, 91485, -37700, 77152,
    63073, 26521, 37784, -15175, 94811, 25526, -48860, 40079, -92828, -17903, 97479, 24433, 57418,
    -83558, -100558, -58661, -72583, -77189, -16051, 68967, -100157, 99623, 40482, 20349, 77276,
    13331, -48123, 40765, 81631, 91113, -46456, -39940, 34719, 62303, 12312, -97757, -24999, 41931,
    58217, 6320, 1004, -99204, 58766, -73775, -12800, 56312, -4434, -99864, 36492, 16360, -31331,
    4400, -61227, -98256, 54918, 41489, 6206, 45942, 67601, 65399, -25226, 55475, -24135, 42185,
    74072, -4507, -88643, -80033, -26670, 90720, 42400, -85157, 14575, -86297, 31185, 47184,
    -81613, 52509, 71743, 65678, 94358, 60593, 24386, -66986, 20935, -28107, 44793, -50192, 97766,
    84123, -54014, 75172, -44598, -15927, -2080, 29426, -715, -27901, -24483, -98718, 66756, 13993,
    -93585, 24584, -63850, 59139, -14198, 53085, -1027, -84313, -57285, -71753, -76716, -5657,
    91402, -5983, 74177, 22276, -42512, 2521, 86763, 83235, -68375, 44198, 85635, 4055, -31003,
    -14277, 46367, -61932, 20402, -23101, -72945, 75708, 16074, -88203, -83179, -74672, -100696,
    56755, -29247, 6890, -29678, 14742, -48218, 93772, -86336, 79750, -19942, 43887, 32312, -84368,
    -39581, 72375, -16594, -5817, 6998, 79967, -36289, -18647, 57222, -25418, 97185, -91110, 19503,
    -99867, -74567, -92791, 56736, -50905, 22695, 24976, 41641, -58628, -63160, 90318, 28977,
    69063, 55879, 4694, 15138, -54686, -22698, -48913, 80902, -48494, 44562, -68564, -84604,
    -90579, 26323, -20891, -98664, 49843, 76576, -97638, 20393, -94912, 26801, -59236, 40893,
    55670, -32626, 11998, -23752, 56847, -48525, 77255, 78360, -55812, -12139, 58853, -66601, 6234,
    74789, 39352, 82733, -37161, 14815, 3886, -283, -27774, -25854, -89265, 54473, -62365, 53813,
    -56927, 41367, -14591, 25006, 13922, 46612, 68146, -74712, -33228, -10231, 76310, -11179,
    14079, -48195, 74536, -87817, 22525, -10463, 49959, -66763, -69846, -67302, 90039, -65195,
    73293, 57485, 45529, 27358, -75499, -53956, -70305, 98019, 75280, -92756, -51674, -4126,
    -75368, 61942, -76596, -30435, 57229, -29577, 9609, -87767, 15969, -49178, -64207, -15705,
    -8841, -80604, -6800, -99012, -91060, 41997, -56646, 99039, -99013, -30379, 98547, 69659,
    63188, -33079, 47065, -73837, 54795, -57227, -14477, -70417, -28680, -55886, -60547, 90064,
    64024, 88884, -24558, -28642, -31887, -73206, 20719, -46458, -55898, 4515, -64849, -43897,
    -99732, -97458, -59627, -53972, 4784, 93943, -6644, 15847, -74659, -76921, -19328, -27628,
    -51301, 33767, -31844, -40987, 5316, 42935, -74205, 65086, 70761, -44131, 60712, 11926, 66397,
    92804, 29160, 71558, 8834, 6374, -32857, 100860, 35283, -92050, -95584, -93663, 10481, 38129,
    -100962, 4306, 92317, -36536, 38070, -98066, -44787, 87170, 86640, 64094, 62960, -41328,
    -79734, -71594, -93325, -96716, -19046, -92935, -60644, 50422, 55186, 6125, 7902, 29112,
    -70290, -58598, -5024, -7471, -1727, 13854, 40681, -69081, 88108, -29981, 30141, -16642, 16697,
    4943, -96638, 52558, 67078, -34446, 88434, -49857, -7617, 10386, -56083, 90375, -90296, -62942,
    4963, 41724, -4630, 19649, 51302, 5802, 66474, 40723, -84242, -93714, 9058, -65854, 86710,
    70903, 54167, 88967, 29440, -51786, 10120, 37628, -43381, -35891, -87053, 98416, -1105, -67546,
    -32060, 65116, -95375, -8028, 14536, 76166, 77773, 13510, -68306, 55685, 78792, -12233, -82914,
    82471, -100129, -54019, 35277, -91862, -14803, -98570, -11143, -61707, -75869, -65564, -32416,
    78538, -54821, 42198, -74891, 77281, 53226, -43131, -70408, -70096, 99543, 97520, -53934, 5903,
    61341, -29651, 27422, -56556, 67854, 59700, 79503, -71192, 72938, 26216, -63632, -4351, -45866,
    43149, 11277, 95383, -73805, 51796, 69670, -91164, 80208, 57643, 89693, -88600, 60311, 20232,
    39740, 37168, -64167, -65686, 7911, 42317, 63598, -80494, 59878, -79649, -91469, 6942, 38649,
    20209, 58976, 38627, 20273, 95654, 60974, 3794, 62129, -76809, 63308, -7395, -3582, 53037,
    36712, -68117, 75250, 40176, 11811, -87566, -2276, -12149, -20937, -29054, -75187, 72494,
    -24683, 62936, -52837, 81867, -53373, -40989, -10642, 100515, -81683, 28216, 79634, 34358,
    20426, 12269, -35348, -31897, -51148, -93333, 7762, -37495, 90823, -21638, 95954, -52418,
    36217, -81379, 94818, -5032, -5234, -27154, 81191, 38304, 78845, 13167, 33439, -54459, -28682,
    93236, 29287, 70187, 18287, 68479, -25394, -72301, -57394, 42603, -87444, -63397, 24072,
    -78817, 58963, -55403, -58997, 45749, 75871, -36773, -28176, -69665, 91691, 95777, 28626,
    -17363, -59078, -27969, 66402, 60082, 86186, -7636, 101009, -44768, 46914, 97020, 11626,
    -93370, -84708, 79487, 15389, 50548, 46775, -19619, -14685, -408, -11384, 35087, -42720,
    -35919, 95041, -76088, -63670, 24533, 92162, -37026, -19333, 87888, -64275, -8585, 30799,
    16057, -21093, 85618, 71165, 94221, -18765, 68469, 97569, -20816, -36157, 88590, 62652, 95655,
    68953, 55470, -14669, 57084, 89998, -96682, 49487, -37371, 66454, -88376, 22830, 20309, 45864,
    -91205, -44178, -35972, 77660, 86001, 85827, 61243, 23167, -100025, -63667, -33498, -52088,
    -20411, -48710, 50008, -4072, 32783, 24187, 47096, 77675, -70616, 5523, 26414, 96939, 71053,
    34499, -45018, 79694, 16149, -98037, -38801, 10652, 65411, 28147, -24729, -34022, 32016,
    -13116, -90371, -80541, 977, 90869, -26241, 66910, -64562, 55175, 15823, -63402, -40360,
    -60676, 18078, 86979, 52452, 32316, -58002, 87141, 23563, 57146, -94135, 96700, -82822, -64711,
    -15798, 60124, -93480, 51367, 30967, -70214, -54629, 34159, -75803, -19938, -11464, -29653,
    -7946, 60555, -78975, 14799, -96844, -26593, 65168, -85973,
];

/// NTT reverse table where the i-th element is (1/g)^rev(i) where
/// - g = 202470 is a primitive root
/// - rev(i) is the reverse bit decomposition of i, i.e.,
///   0   ->  0
///   1   ->  100 0000
///   2   ->  010 0000
///   3   ->  110 0000   ...
const INV_NTT_TABLE: [i32; 1024] = [
    1, -7979, -23958, -35197, -69696, -47095, -96940, -18435, -78926, -264, 34630, 39569, -65147,
    -50779, -768, 45282, -61355, -96950, -16160, -10268, -65443, 80722, -5555, -79562, -47922,
    -22520, -74963, 8427, 21543, 42947, 81944, 47249, 62697, -67712, -100502, 17343, 2544, -23276,
    79501, 75658, -33704, 73738, -84767, -28115, -62274, -63357, -98835, 98048, 58234, 60790,
    -26779, -32021, 32690, -93152, 47819, 33345, 31073, 35452, 62082, -26699, -59015, 88219, 84701,
    -53530, -48681, -49049, 64142, -40446, 2274, -99229, 60065, 49457, 27256, 78345, 68165, 97764,
    -41319, 7923, 80456, -42426, 68312, -61384, 3320, 70363, -27206, -71789, -49547, -32837, 14864,
    10649, -77444, -65468, -96267, 86029, 49411, -98537, 91005, -70402, -94781, -11091, 37619,
    -87561, -38917, -98853, 67148, -100466, -89482, 83565, -2262, 3481, 57945, -66315, 3092, 64798,
    -73291, 49237, 26407, -41086, -69546, -27427, 75420, -5276, 22376, 87289, -100795, -77846,
    58380, -90379, 97274, -10762, -47510, -65820, 46110, 85005, 97717, -98658, -2626, 69295, 60278,
    -28046, -64263, -7860, -93328, -47657, -8962, -64011, -3831, -48154, -66441, -66356, -20325,
    -29225, -70405, -67068, 60783, -2381, -81226, -99087, -10786, 94222, -22262, 16870, -90147,
    -84731, -96357, -6873, -24652, 27898, -6886, -2669, -66154, 76707, 10305, 94123, 65964, 20032,
    -61951, -4785, 70098, 83585, -90992, -33325, -13920, -40964, -46722, -67929, -33637, -55349,
    -79421, 97034, -68587, 25326, -99279, -8830, 30839, 77761, -2447, 60325, 29609, -42966,
    -100837, 54519, 50851, -31376, -91687, 37749, 11144, 90591, -45334, 8634, -35849, -45312,
    98465, 15640, 6685, -15576, 49093, 5749, 59, -65255, 73900, -42376, -57004, 59937, 21637,
    -98820, 60175, -17221, 64462, 42063, -10995, -62944, 66657, -35084, -85778, -71466, -46783,
    13284, 8530, 64138, 88509, -24612, 95005, 48572, 36761, 67572, 38994, 92729, -9472, -49781,
    49569, 60052, -3256, 27240, -52657, 45987, -3886, -14815, 37161, -82733, -39352, -74789, -6234,
    66601, -58853, 12139, 55812, -78360, -77255, 48525, -56847, 23752, -11998, 32626, -55670,
    -40893, 59236, -26801, 94912, -20393, 97638, -76576, -49843, 98664, 20891, -26323, 90579,
    84604, 68564, -44562, 48494, -80902, 48913, 22698, 54686, -15138, -4694, -55879, -69063,
    -28977, -90318, 63160, 58628, -41641, -24976, -22695, 50905, -56736, 92791, 74567, 99867,
    -19503, 91110, -97185, 25418, -57222, 18647, 36289, -79967, -6998, 5817, 16594, -72375, 39581,
    84368, -32312, -43887, 19942, -79750, 86336, -93772, 48218, -14742, 29678, -6890, 29247,
    -56755, 100696, 74672, 83179, 88203, -16074, -75708, 72945, 23101, -20402, 61932, -46367,
    14277, 31003, -4055, -85635, -44198, 68375, -83235, -86763, -2521, 42512, -22276, -74177, 5983,
    -91402, 5657, 76716, 71753, 57285, 84313, 1027, -53085, 14198, -59139, 63850, -24584, 93585,
    -13993, -66756, 98718, 24483, 27901, 715, -29426, 2080, 15927, 44598, -75172, 54014, -84123,
    -97766, 50192, -44793, 28107, -20935, 66986, -24386, -60593, -94358, -65678, -71743, -52509,
    81613, -47184, -31185, 86297, -14575, 85157, -42400, -90720, 26670, 80033, 88643, 4507, -74072,
    -42185, 24135, -55475, 25226, -65399, -67601, -45942, -6206, -41489, -54918, 98256, 61227,
    -4400, 31331, -16360, -36492, 99864, 4434, -56312, 12800, 73775, -58766, 99204, -1004, -6320,
    -58217, -41931, 24999, 97757, -12312, -62303, -34719, 39940, 46456, -91113, -81631, -40765,
    48123, -13331, -77276, -20349, -40482, -99623, 100157, -68967, 16051, 77189, 72583, 58661,
    100558, 83558, -57418, -24433, -97479, 17903, 92828, -40079, 48860, -25526, -94811, 15175,
    -37784, -26521, -63073, -77152, 37700, -91485, 48015, 61113, 338, -65841, 12316, -99377,
    -37900, -54313, 80266, 89232, 86408, 7376, -54734, -70703, 80391, -98841, -56831, -76886,
    -57184, 23783, 12251, 87619, -19657, -74193, -52813, -92854, 22604, -9784, 6631, 82130, -17574,
    47325, -80089, 85973, -65168, 26593, 96844, -14799, 78975, -60555, 7946, 29653, 11464, 19938,
    75803, -34159, 54629, 70214, -30967, -51367, 93480, -60124, 15798, 64711, 82822, -96700, 94135,
    -57146, -23563, -87141, 58002, -32316, -52452, -86979, -18078, 60676, 40360, 63402, -15823,
    -55175, 64562, -66910, 26241, -90869, -977, 80541, 90371, 13116, -32016, 34022, 24729, -28147,
    -65411, -10652, 38801, 98037, -16149, -79694, 45018, -34499, -71053, -96939, -26414, -5523,
    70616, -77675, -47096, -24187, -32783, 4072, -50008, 48710, 20411, 52088, 33498, 63667, 100025,
    -23167, -61243, -85827, -86001, -77660, 35972, 44178, 91205, -45864, -20309, -22830, 88376,
    -66454, 37371, -49487, 96682, -89998, -57084, 14669, -55470, -68953, -95655, -62652, -88590,
    36157, 20816, -97569, -68469, 18765, -94221, -71165, -85618, 21093, -16057, -30799, 8585,
    64275, -87888, 19333, 37026, -92162, -24533, 63670, 76088, -95041, 35919, 42720, -35087, 11384,
    408, 14685, 19619, -46775, -50548, -15389, -79487, 84708, 93370, -11626, -97020, -46914, 44768,
    -101009, 7636, -86186, -60082, -66402, 27969, 59078, 17363, -28626, -95777, -91691, 69665,
    28176, 36773, -75871, -45749, 58997, 55403, -58963, 78817, -24072, 63397, 87444, -42603, 57394,
    72301, 25394, -68479, -18287, -70187, -29287, -93236, 28682, 54459, -33439, -13167, -78845,
    -38304, -81191, 27154, 5234, 5032, -94818, 81379, -36217, 52418, -95954, 21638, -90823, 37495,
    -7762, 93333, 51148, 31897, 35348, -12269, -20426, -34358, -79634, -28216, 81683, -100515,
    10642, 40989, 53373, -81867, 52837, -62936, 24683, -72494, 75187, 29054, 20937, 12149, 2276,
    87566, -11811, -40176, -75250, 68117, -36712, -53037, 3582, 7395, -63308, 76809, -62129, -3794,
    -60974, -95654, -20273, -38627, -58976, -20209, -38649, -6942, 91469, 79649, -59878, 80494,
    -63598, -42317, -7911, 65686, 64167, -37168, -39740, -20232, -60311, 88600, -89693, -57643,
    -80208, 91164, -69670, -51796, 73805, -95383, -11277, -43149, 45866, 4351, 63632, -26216,
    -72938, 71192, -79503, -59700, -67854, 56556, -27422, 29651, -61341, -5903, 53934, -97520,
    -99543, 70096, 70408, 43131, -53226, -77281, 74891, -42198, 54821, -78538, 32416, 65564, 75869,
    61707, 11143, 98570, 14803, 91862, -35277, 54019, 100129, -82471, 82914, 12233, -78792, -55685,
    68306, -13510, -77773, -76166, -14536, 8028, 95375, -65116, 32060, 67546, 1105, -98416, 87053,
    35891, 43381, -37628, -10120, 51786, -29440, -88967, -54167, -70903, -86710, 65854, -9058,
    93714, 84242, -40723, -66474, -5802, -51302, -19649, 4630, -41724, -4963, 62942, 90296, -90375,
    56083, -10386, 7617, 49857, -88434, 34446, -67078, -52558, 96638, -4943, -16697, 16642, -30141,
    29981, -88108, 69081, -40681, -13854, 1727, 7471, 5024, 58598, 70290, -29112, -7902, -6125,
    -55186, -50422, 60644, 92935, 19046, 96716, 93325, 71594, 79734, 41328, -62960, -64094, -86640,
    -87170, 44787, 98066, -38070, 36536, -92317, -4306, 100962, -38129, -10481, 93663, 95584,
    92050, -35283, -100860, 32857, -6374, -8834, -71558, -29160, -92804, -66397, -11926, -60712,
    44131, -70761, -65086, 74205, -42935, -5316, 40987, 31844, -33767, 51301, 27628, 19328, 76921,
    74659, -15847, 6644, -93943, -4784, 53972, 59627, 97458, 99732, 43897, 64849, -4515, 55898,
    46458, -20719, 73206, 31887, 28642, 24558, -88884, -64024, -90064, 60547, 55886, 28680, 70417,
    14477, 57227, -54795, 73837, -47065, 33079, -63188, -69659, -98547, 30379, 99013, -99039,
    56646, -41997, 91060, 99012, 6800, 80604, 8841, 15705, 64207, 49178, -15969, 87767, -9609,
    29577, -57229, 30435, 76596, -61942, 75368, 4126, 51674, 92756, -75280, -98019, 70305, 53956,
    75499, -27358, -45529, -57485, -73293, 65195, -90039, 67302, 69846, 66763, -49959, 10463,
    -22525, 87817, -74536, 48195, -14079, 11179, -76310, 10231, 33228, 74712, -68146, -46612,
    -13922, -25006, 14591, -41367, 56927, -53813, 62365, -54473, 89265, 25854, 27774, 283,
];

/// convert a polynomial into its NTT form
pub(crate) fn hvc_ntt(p: &mut [i32; N as usize]) {
    let mut t = N as usize;
    for l in 0..9 {
        let m = 1 << l;
        let ht = t >> 1;
        let mut i = 0;
        let mut j1 = 0;
        while i < m {
            let s = NTT_TABLE[m + i];
            let j2 = j1 + ht;
            let mut j = j1;
            while j < j2 {
                let u = p[j];
                let v = ((p[j + ht] as i64) * (s as i64) % HVC_MODULUS as i64) as i32;
                p[j] = (u + v) % HVC_MODULUS;
                p[j + ht] = (u + HVC_MODULUS - v) % HVC_MODULUS;
                j += 1;
            }
            i += 1;
            j1 += t;
        }
        t = ht;
    }
}

/// convert an NTT form polynomial into its integer form
pub(crate) fn hvc_inv_ntt(p: &mut [i32; N as usize]) {
    let mut t = 1;
    let mut m = N;

    while m > 1 {
        let hm = m >> 1;
        let dt = t << 1;
        let mut i = 0usize;
        let mut j1 = 0;
        while i < hm {
            let j2 = j1 + t;
            let s = INV_NTT_TABLE[hm + i];
            let mut j = j1;
            while j < j2 {
                let u = p[j];
                let v = p[j + t];
                p[j] = (u + v) % HVC_MODULUS;
                p[j + t] =
                    (((u + HVC_MODULUS - v) as i64) * (s as i64) % HVC_MODULUS as i64) as i32;
                j += 1;
            }
            i += 1;
            j1 += dt;
        }
        t = dt;
        m = hm;
    }
    for e in p.iter_mut() {
        *e = (*e as i64 * 202357 as i64 % HVC_MODULUS as i64) as i32;
    }
}

#[cfg(test)]
mod tests {
    use super::{hvc_inv_ntt, hvc_ntt};
    use crate::{poly::lift, HVCPoly, HVC_MODULUS};
    use ark_std::{end_timer, start_timer};
    use rand::SeedableRng;
    use rand_chacha::ChaCha20Rng;

    #[test]
    fn bench_hvc_fft() {
        let mut rng = ChaCha20Rng::from_seed([0u8; 32]);
        let size = 10000;
        let mut p: Vec<_> = (0..size)
            .map(|_| HVCPoly::rand_poly(&mut rng).coeffs)
            .collect();
        let p_rec = p.clone();
        let timer = start_timer!(|| format!("start {} fft", size));
        for e in p.iter_mut() {
            hvc_ntt(e)
        }
        end_timer!(timer);

        let timer = start_timer!(|| format!("start {} ifft", size));
        for e in p.iter_mut() {
            hvc_inv_ntt(e)
        }
        end_timer!(timer);

        for (x, y) in p.iter().zip(p_rec.iter()) {
            for (xx, yy) in x.iter().zip(y.iter()) {
                assert_eq!(lift(*xx, HVC_MODULUS), lift(*yy, HVC_MODULUS))
            }
        }
    }
}
